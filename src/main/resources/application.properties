spring.application.name=payment-queue-listner
spring.profiles.active=dev

# AWS Configuration
aws.region=us-east-1
aws.credentials.access-key=${AWS_ACCESS_KEY:dummy-access-key}
aws.credentials.secret-key=${AWS_SECRET_KEY:dummy-secret-key}

# SQS Configuration
aws.sqs.queue1.url=${SQS_QUEUE1_URL:https://sqs.us-east-1.amazonaws.com/123456789012/queue1}
aws.sqs.queue2.url=${SQS_QUEUE2_URL:https://sqs.us-east-1.amazonaws.com/123456789012/queue2}
aws.sqs.max-number-of-messages=10
aws.sqs.visibility-timeout=30
aws.sqs.wait-time-seconds=20

# DynamoDB Configuration
aws.dynamodb.table-name=${DYNAMODB_TABLE_NAME:payment-data}

# Thread Pool Configuration
app.thread-pool.core-size=10
app.thread-pool.max-size=20
app.thread-pool.queue-capacity=100
app.thread-pool.keep-alive-seconds=60

# Logging
logging.level.com.payment.queque=INFO
logging.level.io.awspring.cloud=INFO
logging.level.software.amazon.awssdk=WARN

# H2 Database Configuration
spring.datasource.url=jdbc:h2:mem:transactiondb
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.h2.console.enabled=true
spring.h2.console.path=/h2-console
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true

# Transaction SQS Queue
aws.sqs.transaction-queue.url=${SQS_TRANSACTION_QUEUE_URL:https://sqs.us-east-1.amazonaws.com/123456789012/transaction-queue}

# Transaction Poller Configuration
app.transaction-poller.enabled=true
app.transaction-poller.cron=*/10 * * * * *

# Query Configuration
# Set to true to use native SQL queries for potentially better performance with large datasets
# Set to false to use standard JPA queries (default)
app.use-native-query=false
